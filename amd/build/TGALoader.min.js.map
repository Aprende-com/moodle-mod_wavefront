{"version":3,"file":"TGALoader.min.js","sources":["../src/TGALoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tLinearMipmapLinearFilter\n} from 'mod_wavefront/three';\n\nclass TGALoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tparse( buffer ) {\n\n\t\t// reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n\n\t\tfunction tgaCheckHeader( header ) {\n\n\t\t\tswitch ( header.image_type ) {\n\n\t\t\t\t// check indexed type\n\n\t\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\t\tif ( header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for indexed type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// check colormap type\n\n\t\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\t\tif ( header.colormap_type ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for colormap type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// What the need of a file without data ?\n\n\t\t\t\tcase TGA_TYPE_NO_DATA:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t\t\t\t// Invalid type ?\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type \"%s\".', header.image_type );\n\n\t\t\t}\n\n\t\t\t// check image width and height\n\n\t\t\tif ( header.width <= 0 || header.height <= 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid image size.' );\n\n\t\t\t}\n\n\t\t\t// check image pixel size\n\n\t\t\tif ( header.pixel_size !== 8 && header.pixel_size !== 16 &&\n\t\t\t\theader.pixel_size !== 24 && header.pixel_size !== 32 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// parse tga image buffer\n\n\t\tfunction tgaParse( use_rle, use_pal, header, offset, data ) {\n\n\t\t\tlet pixel_data,\n\t\t\t\tpalettes;\n\n\t\t\tconst pixel_size = header.pixel_size >> 3;\n\t\t\tconst pixel_total = header.width * header.height * pixel_size;\n\n\t\t\t // read palettes\n\n\t\t\t if ( use_pal ) {\n\n\t\t\t\t palettes = data.subarray( offset, offset += header.colormap_length * ( header.colormap_size >> 3 ) );\n\n\t\t\t }\n\n\t\t\t // read RLE\n\n\t\t\t if ( use_rle ) {\n\n\t\t\t\t pixel_data = new Uint8Array( pixel_total );\n\n\t\t\t\tlet c, count, i;\n\t\t\t\tlet shift = 0;\n\t\t\t\tconst pixels = new Uint8Array( pixel_size );\n\n\t\t\t\twhile ( shift < pixel_total ) {\n\n\t\t\t\t\tc = data[ offset ++ ];\n\t\t\t\t\tcount = ( c & 0x7f ) + 1;\n\n\t\t\t\t\t// RLE pixels\n\n\t\t\t\t\tif ( c & 0x80 ) {\n\n\t\t\t\t\t\t// bind pixel tmp array\n\n\t\t\t\t\t\tfor ( i = 0; i < pixel_size; ++ i ) {\n\n\t\t\t\t\t\t\tpixels[ i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// copy pixel array\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data.set( pixels, shift + i * pixel_size );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += pixel_size * count;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// raw pixels\n\n\t\t\t\t\t\tcount *= pixel_size;\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data[ shift + i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += count;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t } else {\n\n\t\t\t\t// raw pixels\n\n\t\t\t\tpixel_data = data.subarray(\n\t\t\t\t\t offset, offset += ( use_pal ? header.width * header.height : pixel_total )\n\t\t\t\t);\n\n\t\t\t }\n\n\t\t\t return {\n\t\t\t\tpixel_data: pixel_data,\n\t\t\t\tpalettes: palettes\n\t\t\t };\n\n\t\t}\n\n\t\tfunction tgaGetImageData8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes ) {\n\n\t\t\tconst colormap = palettes;\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = colormap[ ( color * 3 ) + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = colormap[ ( color * 3 ) + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = colormap[ ( color * 3 ) + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\tcolor = image[ i + 0 ] + ( image[ i + 1 ] << 8 );\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = ( color & 0x7C00 ) >> 7;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = ( color & 0x03E0 ) >> 2;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = ( color & 0x001F ) << 3;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = ( color & 0x8000 ) ? 0 : 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData24bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 3 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData32bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 4 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 3 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction getTgaRGBA( data, width, height, image, palette ) {\n\n\t\t\tlet x_start,\n\t\t\t\ty_start,\n\t\t\t\tx_step,\n\t\t\t\ty_step,\n\t\t\t\tx_end,\n\t\t\t\ty_end;\n\n\t\t\tswitch ( ( header.flags & TGA_ORIGIN_MASK ) >> TGA_ORIGIN_SHIFT ) {\n\n\t\t\t\tdefault:\n\t\t\t\tcase TGA_ORIGIN_UL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_UR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( use_grey ) {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageDataGrey8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageDataGrey16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageData8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageData16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\ttgaGetImageData24bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 32:\n\t\t\t\t\t\ttgaGetImageData32bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Load image data according to specific method\n\t\t\t// let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n\t\t\t// func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// TGA constants\n\n\t\tconst TGA_TYPE_NO_DATA = 0,\n\t\t\tTGA_TYPE_INDEXED = 1,\n\t\t\tTGA_TYPE_RGB = 2,\n\t\t\tTGA_TYPE_GREY = 3,\n\t\t\tTGA_TYPE_RLE_INDEXED = 9,\n\t\t\tTGA_TYPE_RLE_RGB = 10,\n\t\t\tTGA_TYPE_RLE_GREY = 11,\n\n\t\t\tTGA_ORIGIN_MASK = 0x30,\n\t\t\tTGA_ORIGIN_SHIFT = 0x04,\n\t\t\tTGA_ORIGIN_BL = 0x00,\n\t\t\tTGA_ORIGIN_BR = 0x01,\n\t\t\tTGA_ORIGIN_UL = 0x02,\n\t\t\tTGA_ORIGIN_UR = 0x03;\n\n\t\tif ( buffer.length < 19 ) console.error( 'THREE.TGALoader: Not enough data to contain header.' );\n\n\t\tlet offset = 0;\n\n\t\tconst content = new Uint8Array( buffer ),\n\t\t\theader = {\n\t\t\t\tid_length: content[ offset ++ ],\n\t\t\t\tcolormap_type: content[ offset ++ ],\n\t\t\t\timage_type: content[ offset ++ ],\n\t\t\t\tcolormap_index: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_length: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_size: content[ offset ++ ],\n\t\t\t\torigin: [\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8\n\t\t\t\t],\n\t\t\t\twidth: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\theight: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tpixel_size: content[ offset ++ ],\n\t\t\t\tflags: content[ offset ++ ]\n\t\t\t};\n\n\t\t// check tga if it is valid format\n\n\t\ttgaCheckHeader( header );\n\n\t\tif ( header.id_length + offset > buffer.length ) {\n\n\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t}\n\n\t\t// skip the needn't data\n\n\t\toffset += header.id_length;\n\n\t\t// get targa information about RLE compression and palette\n\n\t\tlet use_rle = false,\n\t\t\tuse_pal = false,\n\t\t\tuse_grey = false;\n\n\t\tswitch ( header.image_type ) {\n\n\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tuse_rle = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t//\n\n\t\tconst imageData = new Uint8Array( header.width * header.height * 4 );\n\t\tconst result = tgaParse( use_rle, use_pal, header, offset, content );\n\t\tgetTgaRGBA( imageData, header.width, header.height, result.pixel_data, result.palettes );\n\n\t\treturn {\n\n\t\t\tdata: imageData,\n\t\t\twidth: header.width,\n\t\t\theight: header.height,\n\t\t\tflipY: true,\n\t\t\tgenerateMipmaps: true,\n\t\t\tminFilter: LinearMipmapLinearFilter,\n\n\t\t};\n\n\t}\n\n}\n\nexport { TGALoader };\n"],"names":["TGALoader","DataTextureLoader","constructor","manager","parse","buffer","TGA_TYPE_NO_DATA","TGA_TYPE_INDEXED","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_INDEXED","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_BL","TGA_ORIGIN_BR","TGA_ORIGIN_UL","TGA_ORIGIN_UR","length","console","error","offset","content","Uint8Array","header","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","origin","width","height","pixel_size","flags","tgaCheckHeader","use_rle","use_pal","use_grey","imageData","result","data","pixel_data","palettes","pixel_total","subarray","c","count","i","shift","pixels","set","tgaParse","image","palette","x_start","y_start","x_step","y_step","x_end","y_end","color","x","y","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","colormap","tgaGetImageData8bits","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","getTgaRGBA","flipY","generateMipmaps","minFilter","LinearMipmapLinearFilter"],"mappings":"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"}