{"version":3,"sources":["../src/ar_renderer.js"],"names":["camera","scene","renderer","controller","reticle","hitTestSource","hitTestSourceRequested","init","container","document","getElementById","stage","console","log","THREE","Scene","PerspectiveCamera","window","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","xr","enabled","appendChild","domElement","body","ARButton","createButton","requiredFeatures","geometry","CylinderGeometry","translate","onSelect","visible","material","MeshPhongMaterial","color","Math","random","mesh","Mesh","setFromMatrixPosition","matrix","scale","y","getController","addEventListener","RingGeometry","rotateX","PI","MeshBasicMaterial","matrixAutoUpdate","onWindowResize","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Encapsules the behavior for creating a Wavefront 3D model in Moodle.\n *\n * Manages the UI while operations are occuring, including rendering and manipulating the model.\n *\n * @module     mod_wavefront/ar_renderer\n * @class      ar_renderer\n * @package    mod_wavefront\n * @copyright  2022 Ian Wild\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.9\n */\n\nimport WebGL from 'mod_wavefront/WebGL';\nimport * as THREE from 'mod_wavefront/three';\nimport { MTLLoader } from 'mod_wavefront/MTLLoader';\nimport { OBJLoader } from 'mod_wavefront/OBJLoader';\nimport { OrbitControls } from 'mod_wavefront/OrbitControls';\nimport { ARButton } from 'mod_wavefront/ARButton';\nimport jQuery from 'jquery';\n\nlet container;\nlet camera, scene, renderer;\nlet controller;\n\nlet reticle;\n\nlet hitTestSource = null;\nlet hitTestSourceRequested = false;\n\n\nexport const init = (stages) => {\n\n\tvar container = document.getElementById(stage);\n    console.log(container);\n\n\tscene = new THREE.Scene();\n\n\tcamera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 20 );\n\n\tconst light = new THREE.HemisphereLight( 0xffffff, 0xbbbbff, 1 );\n\tlight.position.set( 0.5, 1, 0.25 );\n\tscene.add( light );\n\n\t//\n\n\trenderer = new THREE.WebGLRenderer( { antialias: true, alpha: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.xr.enabled = true;\n\tcontainer.appendChild( renderer.domElement );\n\n\t//\n\n\tdocument.body.appendChild( ARButton.createButton( renderer, { requiredFeatures: [ 'hit-test' ] } ) );\n\n\t//\n\n\tconst geometry = new THREE.CylinderGeometry( 0.1, 0.1, 0.2, 32 ).translate( 0, 0.1, 0 );\n\n\tfunction onSelect() {\n\n\t\tif ( reticle.visible ) {\n\n\t\t\tconst material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random() } );\n\t\t\tconst mesh = new THREE.Mesh( geometry, material );\n\t\t\tmesh.position.setFromMatrixPosition( reticle.matrix );\n\t\t\tmesh.scale.y = Math.random() * 2 + 1;\n\t\t\tscene.add( mesh );\n\n\t\t}\n\n\t}\n\n\tcontroller = renderer.xr.getController( 0 );\n\tcontroller.addEventListener( 'select', onSelect );\n\tscene.add( controller );\n\n\treticle = new THREE.Mesh(\n\t\tnew THREE.RingGeometry( 0.15, 0.2, 32 ).rotateX( - Math.PI / 2 ),\n\t\tnew THREE.MeshBasicMaterial()\n\t);\n\treticle.matrixAutoUpdate = false;\n\treticle.visible = false;\n\tscene.add( reticle );\n\n\t//\n\n\twindow.addEventListener( 'resize', onWindowResize );\n\n}\n\nfunction onWindowResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n}\n\n//\n\nfunction animate() {\n\n\trenderer.setAnimationLoop( render );\n\n}\n\nfunction render( timestamp, frame ) {\n\n\tif ( frame ) {\n\n\t\tconst referenceSpace = renderer.xr.getReferenceSpace();\n\t\tconst session = renderer.xr.getSession();\n\n\t\tif ( hitTestSourceRequested === false ) {\n\n\t\t\tsession.requestReferenceSpace( 'viewer' ).then( function ( referenceSpace ) {\n\n\t\t\t\tsession.requestHitTestSource( { space: referenceSpace } ).then( function ( source ) {\n\n\t\t\t\t\thitTestSource = source;\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\tsession.addEventListener( 'end', function () {\n\n\t\t\t\thitTestSourceRequested = false;\n\t\t\t\thitTestSource = null;\n\n\t\t\t} );\n\n\t\t\thitTestSourceRequested = true;\n\n\t\t}\n\n\t\tif ( hitTestSource ) {\n\n\t\t\tconst hitTestResults = frame.getHitTestResults( hitTestSource );\n\n\t\t\tif ( hitTestResults.length ) {\n\n\t\t\t\tconst hit = hitTestResults[ 0 ];\n\n\t\t\t\treticle.visible = true;\n\t\t\t\treticle.matrix.fromArray( hit.getPose( referenceSpace ).transform.matrix );\n\n\t\t\t} else {\n\n\t\t\t\treticle.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\trenderer.render( scene, camera );\n\n}"],"file":"ar_renderer.min.js"}