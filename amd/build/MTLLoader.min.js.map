{"version":3,"sources":["../src/MTLLoader.js"],"names":["MTLLoader","manager","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","value","materialOptions","lines","split","info","materialsInfo","i","line","length","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","Loader","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","encoding","sRGBEncoding","n","color","Color","fromArray","convertSRGBToLinear","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","DefaultLoadingManager","getHandler","TextureLoader","texture"],"mappings":"kyDAkBMA,CAAAA,C,+BAEL,WAAaC,CAAb,CAAuB,8BAEfA,CAFe,CAItB,C,qCAeKC,C,CAAKC,C,CAAQC,C,CAAYC,C,CAAU,IAElCC,CAAAA,CAAK,CAAG,IAF0B,CAIlCC,CAAI,CAAmB,EAAd,QAAKA,IAAP,CAAuBC,cAAYC,cAAZ,CAA4BP,CAA5B,CAAvB,CAA2D,KAAKK,IAJrC,CAMlCG,CAAM,CAAG,GAAIC,aAAJ,CAAgB,KAAKV,OAArB,CANyB,CAOxCS,CAAM,CAACE,OAAP,CAAgB,KAAKL,IAArB,EACAG,CAAM,CAACG,gBAAP,CAAyB,KAAKC,aAA9B,EACAJ,CAAM,CAACK,kBAAP,CAA2B,KAAKC,eAAhC,EACAN,CAAM,CAACO,IAAP,CAAaf,CAAb,CAAkB,SAAWgB,CAAX,CAAkB,CAEnC,GAAI,CAEHf,CAAM,CAAEG,CAAK,CAACa,KAAN,CAAaD,CAAb,CAAmBX,CAAnB,CAAF,CAEN,CAAC,MAAQa,CAAR,CAAY,CAEb,GAAKf,CAAL,CAAe,CAEdA,CAAO,CAAEe,CAAF,CAEP,CAJD,IAIO,CAENC,OAAO,CAACC,KAAR,CAAeF,CAAf,CAEA,CAEDd,CAAK,CAACL,OAAN,CAAcsB,SAAd,CAAyBrB,CAAzB,CAEA,CAED,CAtBD,CAsBGE,CAtBH,CAsBeC,CAtBf,CAwBA,C,8DAEmBmB,C,CAAQ,CAE3B,KAAKC,eAAL,CAAuBD,CAAvB,CACA,MAAO,KAEP,C,oCAaMN,C,CAAMX,C,CAAO,CAOnB,OALMmB,CAAAA,CAAK,CAAGR,CAAI,CAACS,KAAL,CAAY,IAAZ,CAKd,CAJIC,CAAI,CAAG,EAIX,CAFMC,CAAa,CAAG,EAEtB,CAAUC,CAAC,CAAG,CAAd,CAEKC,CAFL,CAAiBD,CAAC,CAAGJ,CAAK,CAACM,MAA3B,CAAmCF,CAAC,EAApC,CAA0C,CAErCC,CAFqC,CAE9BL,CAAK,CAAEI,CAAF,CAFyB,CAGzCC,CAAI,CAAGA,CAAI,CAACE,IAAL,EAAP,CAEA,GAAqB,CAAhB,GAAAF,CAAI,CAACC,MAAL,EAA0C,GAArB,GAAAD,CAAI,CAACG,MAAL,CAAa,CAAb,CAA1B,CAAqD,CAGpD,QAEA,CAVwC,GAYnCC,CAAAA,CAAG,CAAGJ,CAAI,CAACK,OAAL,CAAc,GAAd,CAZ6B,CAcrCC,CAAG,CAAY,CAAP,EAAAF,CAAF,CAAeJ,CAAI,CAACO,SAAL,CAAgB,CAAhB,CAAmBH,CAAnB,CAAf,CAA0CJ,CAdX,CAezCM,CAAG,CAAGA,CAAG,CAACE,WAAJ,EAAN,CAEA,GAAIf,CAAAA,CAAK,CAAY,CAAP,EAAAW,CAAF,CAAeJ,CAAI,CAACO,SAAL,CAAgBH,CAAG,CAAG,CAAtB,CAAf,CAA2C,EAAvD,CACAX,CAAK,CAAGA,CAAK,CAACS,IAAN,EAAR,CAEA,GAAa,QAAR,GAAAI,CAAL,CAAwB,CAIvBT,CAAI,CAAG,CAAEY,IAAI,CAAEhB,CAAR,CAAP,CACAK,CAAa,CAAEL,CAAF,CAAb,CAAyBI,CAEzB,CAPD,IAOO,CAEN,GAAa,IAAR,GAAAS,CAAG,EAAqB,IAAR,GAAAA,CAAhB,EAAwC,IAAR,GAAAA,CAAhC,EAAwD,IAAR,GAAAA,CAArD,CAAoE,CAEnE,GAAMI,CAAAA,CAAE,CAAGjB,CAAK,CAACG,KAAN,CAlCY,KAkCZ,CAAgC,CAAhC,CAAX,CACAC,CAAI,CAAES,CAAF,CAAJ,CAAc,CAAEK,UAAU,CAAED,CAAE,CAAE,CAAF,CAAJ,CAAZ,CAAyBC,UAAU,CAAED,CAAE,CAAE,CAAF,CAAJ,CAAnC,CAAgDC,UAAU,CAAED,CAAE,CAAE,CAAF,CAAJ,CAA1D,CAEd,CALD,IAKO,CAENb,CAAI,CAAES,CAAF,CAAJ,CAAcb,CAEd,CAED,CAED,CAED,GAAMmB,CAAAA,CAAe,CAAG,GAAIC,CAAAA,CAAJ,CAAqB,KAAKC,YAAL,EAAqBtC,CAA1C,CAAgD,KAAKkB,eAArD,CAAxB,CACAkB,CAAe,CAACG,cAAhB,CAAgC,KAAKC,WAArC,EACAJ,CAAe,CAACK,UAAhB,CAA4B,KAAK/C,OAAjC,EACA0C,CAAe,CAACM,YAAhB,CAA8BpB,CAA9B,EACA,MAAOc,CAAAA,CAEP,C,cApIsBO,Q,mBAuJlBN,CAAAA,C,YAEL,YAA0C,IAA7BO,CAAAA,CAA6B,wDAAnB,EAAmB,CAAfC,CAAe,wDAAL,EAAK,WAEzC,KAAKD,OAAL,CAAeA,CAAf,CACA,KAAKC,OAAL,CAAeA,CAAf,CACA,KAAKvB,aAAL,CAAqB,EAArB,CACA,KAAKwB,SAAL,CAAiB,EAAjB,CACA,KAAKC,cAAL,CAAsB,EAAtB,CACA,KAAKC,UAAL,CAAkB,EAAlB,CAEA,KAAKR,WAAL,CAAmB,WAAnB,CAEA,KAAKS,IAAL,CAAc,KAAKJ,OAAL,CAAaI,IAAb,SAAF,CAAsC,KAAKJ,OAAL,CAAaI,IAAnD,CAA0DC,WAAtE,CACA,KAAKC,IAAL,CAAc,KAAKN,OAAL,CAAaM,IAAb,SAAF,CAAsC,KAAKN,OAAL,CAAaM,IAAnD,CAA0DC,gBAEtE,C,yDAEenC,C,CAAQ,CAEvB,KAAKuB,WAAL,CAAmBvB,CAAnB,CACA,MAAO,KAEP,C,8CAEWA,C,CAAQ,CAEnB,KAAKvB,OAAL,CAAeuB,CAEf,C,kDAEaK,C,CAAgB,CAE7B,KAAKA,aAAL,CAAqB,KAAK+B,OAAL,CAAc/B,CAAd,CAArB,CACA,KAAKwB,SAAL,CAAiB,EAAjB,CACA,KAAKC,cAAL,CAAsB,EAAtB,CACA,KAAKC,UAAL,CAAkB,EAElB,C,wCAEQ1B,C,CAAgB,CAExB,GAAK,CAAE,KAAKuB,OAAZ,CAAsB,MAAOvB,CAAAA,CAAP,CAEtB,GAAMgC,CAAAA,CAAS,CAAG,EAAlB,CAEA,IAAM,GAAMC,CAAAA,CAAZ,GAAkBjC,CAAAA,CAAlB,CAAkC,IAI3BkC,CAAAA,CAAG,CAAGlC,CAAa,CAAEiC,CAAF,CAJQ,CAM3BE,CAAM,CAAG,EANkB,CAQjCH,CAAS,CAAEC,CAAF,CAAT,CAAkBE,CAAlB,CAEA,IAAM,GAAMC,CAAAA,CAAZ,GAAoBF,CAAAA,CAApB,CAA0B,IAErBG,CAAAA,CAAI,GAFiB,CAGrB1C,CAAK,CAAGuC,CAAG,CAAEE,CAAF,CAHU,CAInBE,CAAK,CAAGF,CAAI,CAAC1B,WAAL,EAJW,CAMzB,OAAS4B,CAAT,EAEC,IAAK,IAAL,CACA,IAAK,IAAL,CACA,IAAK,IAAL,CAIC,GAAK,KAAKf,OAAL,EAAgB,KAAKA,OAAL,CAAagB,YAAlC,CAAiD,CAEhD5C,CAAK,CAAG,CAAEA,CAAK,CAAE,CAAF,CAAL,CAAa,GAAf,CAAoBA,CAAK,CAAE,CAAF,CAAL,CAAa,GAAjC,CAAsCA,CAAK,CAAE,CAAF,CAAL,CAAa,GAAnD,CAER,CAED,GAAK,KAAK4B,OAAL,EAAgB,KAAKA,OAAL,CAAaiB,cAAlC,CAAmD,CAElD,GAAoB,CAAf,GAAA7C,CAAK,CAAE,CAAF,CAAL,EAAmC,CAAf,GAAAA,CAAK,CAAE,CAAF,CAAzB,EAAuD,CAAf,GAAAA,CAAK,CAAE,CAAF,CAAlD,CAAgE,CAI/D0C,CAAI,GAEJ,CAED,CAED,MAED,QAEC,MA9BF,CAkCA,GAAKA,CAAL,CAAY,CAEXF,CAAM,CAAEG,CAAF,CAAN,CAAkB3C,CAElB,CAED,CAED,CAED,MAAOqC,CAAAA,CAEP,C,yCAES,CAET,IAAM,GAAMC,CAAAA,CAAZ,GAAkB,MAAKjC,aAAvB,CAAuC,CAEtC,KAAKyC,MAAL,CAAaR,CAAb,CAEA,CAED,C,0CAESS,C,CAAe,CAExB,MAAO,MAAKhB,UAAL,CAAiBgB,CAAjB,CAEP,C,+CAEY,CAEZ,GAAIC,CAAAA,CAAK,CAAG,CAAZ,CAEA,IAAM,GAAMV,CAAAA,CAAZ,GAAkB,MAAKjC,aAAvB,CAAuC,CAEtC,KAAKyB,cAAL,CAAqBkB,CAArB,EAA+B,KAAKF,MAAL,CAAaR,CAAb,CAA/B,CACA,KAAKP,UAAL,CAAiBO,CAAjB,EAAwBU,CAAxB,CACAA,CAAK,EAEL,CAED,MAAO,MAAKlB,cAEZ,C,sCAEOiB,C,CAAe,CAEtB,GAAK,KAAKlB,SAAL,CAAgBkB,CAAhB,UAAL,CAAoD,CAEnD,KAAKE,eAAL,CAAsBF,CAAtB,CAEA,CAED,MAAO,MAAKlB,SAAL,CAAgBkB,CAAhB,CAEP,C,wDAEgBA,C,CAAe,IAIzBjE,CAAAA,CAAK,CAAG,IAJiB,CAKzByD,CAAG,CAAG,KAAKlC,aAAL,CAAoB0C,CAApB,CALmB,CAMzBG,CAAM,CAAG,CAEdlC,IAAI,CAAE+B,CAFQ,CAGdf,IAAI,CAAE,KAAKA,IAHG,CANgB,CAa/B,QAASmB,CAAAA,CAAT,CAAqBxB,CAArB,CAA8BjD,CAA9B,CAAoC,CAEnC,GAAoB,QAAf,QAAOA,CAAAA,CAAP,EAAmC,EAAR,GAAAA,CAAhC,CACC,MAAO,EAAP,CAGD,GAAK,gBAAgB0E,IAAhB,CAAsB1E,CAAtB,CAAL,CAAmC,MAAOA,CAAAA,CAAP,CAEnC,MAAOiD,CAAAA,CAAO,CAAGjD,CAEjB,CAED,QAAS2E,CAAAA,CAAT,CAAwBC,CAAxB,CAAiCtD,CAAjC,CAAyC,CAExC,GAAKkD,CAAM,CAAEI,CAAF,CAAX,CAAyB,OAFe,GAIlCC,CAAAA,CAAS,CAAGzE,CAAK,CAAC0E,gBAAN,CAAwBxD,CAAxB,CAA+BkD,CAA/B,CAJsB,CAKlCO,CAAG,CAAG3E,CAAK,CAAC4E,WAAN,CAAmBP,CAAU,CAAErE,CAAK,CAAC6C,OAAR,CAAiB4B,CAAS,CAAC7E,GAA3B,CAA7B,CAL4B,CAOxC+E,CAAG,CAACE,MAAJ,CAAWC,IAAX,CAAiBL,CAAS,CAACM,KAA3B,EACAJ,CAAG,CAACK,MAAJ,CAAWF,IAAX,CAAiBL,CAAS,CAACO,MAA3B,EAEAL,CAAG,CAACM,KAAJ,CAAYjF,CAAK,CAACoD,IAAlB,CACAuB,CAAG,CAACO,KAAJ,CAAYlF,CAAK,CAACoD,IAAlB,CAEA,GAAiB,KAAZ,GAAAoB,CAAO,EAA0B,aAAZ,GAAAA,CAA1B,CAAsD,CAErDG,CAAG,CAACQ,QAAJ,CAAeC,cAEf,CAEDhB,CAAM,CAAEI,CAAF,CAAN,CAAoBG,CAEpB,CAED,IAAM,GAAMhB,CAAAA,CAAZ,GAAoBF,CAAAA,CAApB,CAA0B,IAEnBvC,CAAAA,CAAK,CAAGuC,CAAG,CAAEE,CAAF,CAFQ,CAGrB0B,CAAC,OAHoB,CAKzB,GAAe,EAAV,GAAAnE,CAAL,CAAoB,SAEpB,OAASyC,CAAI,CAAC1B,WAAL,EAAT,EAIC,IAAK,IAAL,CAICmC,CAAM,CAACkB,KAAP,CAAe,GAAIC,QAAJ,GAAYC,SAAZ,CAAuBtE,CAAvB,EAA+BuE,mBAA/B,EAAf,CAEA,MAED,IAAK,IAAL,CAGCrB,CAAM,CAACsB,QAAP,CAAkB,GAAIH,QAAJ,GAAYC,SAAZ,CAAuBtE,CAAvB,EAA+BuE,mBAA/B,EAAlB,CAEA,MAED,IAAK,IAAL,CAGCrB,CAAM,CAACuB,QAAP,CAAkB,GAAIJ,QAAJ,GAAYC,SAAZ,CAAuBtE,CAAvB,EAA+BuE,mBAA/B,EAAlB,CAEA,MAED,IAAK,QAAL,CAIClB,CAAa,CAAE,KAAF,CAASrD,CAAT,CAAb,CAEA,MAED,IAAK,QAAL,CAICqD,CAAa,CAAE,aAAF,CAAiBrD,CAAjB,CAAb,CAEA,MAED,IAAK,QAAL,CAICqD,CAAa,CAAE,aAAF,CAAiBrD,CAAjB,CAAb,CAEA,MAED,IAAK,MAAL,CAECqD,CAAa,CAAE,WAAF,CAAerD,CAAf,CAAb,CAEA,MAED,IAAK,UAAL,CACA,IAAK,MAAL,CAICqD,CAAa,CAAE,SAAF,CAAarD,CAAb,CAAb,CAEA,MAED,IAAK,OAAL,CAICqD,CAAa,CAAE,UAAF,CAAcrD,CAAd,CAAb,CACAkD,CAAM,CAACwB,WAAP,IAEA,MAED,IAAK,IAAL,CAKCxB,CAAM,CAACyB,SAAP,CAAmBzD,UAAU,CAAElB,CAAF,CAA7B,CAEA,MAED,IAAK,GAAL,CACCmE,CAAC,CAAGjD,UAAU,CAAElB,CAAF,CAAd,CAEA,GAAS,CAAJ,CAAAmE,CAAL,CAAa,CAEZjB,CAAM,CAAC0B,OAAP,CAAiBT,CAAjB,CACAjB,CAAM,CAACwB,WAAP,GAEA,CAED,MAED,IAAK,IAAL,CACCP,CAAC,CAAGjD,UAAU,CAAElB,CAAF,CAAd,CAEA,GAAK,KAAK4B,OAAL,EAAgB,KAAKA,OAAL,CAAaiD,gBAAlC,CAAqDV,CAAC,CAAG,EAAIA,CAAR,CAErD,GAAS,CAAJ,CAAAA,CAAL,CAAa,CAEZjB,CAAM,CAAC0B,OAAP,CAAiB,EAAIT,CAArB,CACAjB,CAAM,CAACwB,WAAP,GAEA,CAED,MAED,QACC,MA9GF,CAkHA,CAED,KAAK7C,SAAL,CAAgBkB,CAAhB,EAAiC,GAAI+B,oBAAJ,CAAuB5B,CAAvB,CAAjC,CACA,MAAO,MAAKrB,SAAL,CAAgBkB,CAAhB,CAEP,C,0DAEiB/C,C,CAAO+E,C,CAAY,IAE9BxB,CAAAA,CAAS,CAAG,CAEjBM,KAAK,CAAE,GAAImB,UAAJ,CAAa,CAAb,CAAgB,CAAhB,CAFU,CAGjBlB,MAAM,CAAE,GAAIkB,UAAJ,CAAa,CAAb,CAAgB,CAAhB,CAHS,CAFkB,CAS9BC,CAAK,CAAGjF,CAAK,CAACG,KAAN,CAAa,KAAb,CATsB,CAUhCQ,CAVgC,CAYpCA,CAAG,CAAGsE,CAAK,CAACrE,OAAN,CAAe,KAAf,CAAN,CAEA,GAAY,CAAP,EAAAD,CAAL,CAAgB,CAEfoE,CAAS,CAACG,SAAV,CAAsBhE,UAAU,CAAE+D,CAAK,CAAEtE,CAAG,CAAG,CAAR,CAAP,CAAhC,CACAsE,CAAK,CAACE,MAAN,CAAcxE,CAAd,CAAmB,CAAnB,CAEA,CAEDA,CAAG,CAAGsE,CAAK,CAACrE,OAAN,CAAe,IAAf,CAAN,CAEA,GAAY,CAAP,EAAAD,CAAL,CAAgB,CAEf4C,CAAS,CAACM,KAAV,CAAgBuB,GAAhB,CAAqBlE,UAAU,CAAE+D,CAAK,CAAEtE,CAAG,CAAG,CAAR,CAAP,CAA/B,CAAqDO,UAAU,CAAE+D,CAAK,CAAEtE,CAAG,CAAG,CAAR,CAAP,CAA/D,EACAsE,CAAK,CAACE,MAAN,CAAcxE,CAAd,CAAmB,CAAnB,CAEA,CAEDA,CAAG,CAAGsE,CAAK,CAACrE,OAAN,CAAe,IAAf,CAAN,CAEA,GAAY,CAAP,EAAAD,CAAL,CAAgB,CAEf4C,CAAS,CAACO,MAAV,CAAiBsB,GAAjB,CAAsBlE,UAAU,CAAE+D,CAAK,CAAEtE,CAAG,CAAG,CAAR,CAAP,CAAhC,CAAsDO,UAAU,CAAE+D,CAAK,CAAEtE,CAAG,CAAG,CAAR,CAAP,CAAhE,EACAsE,CAAK,CAACE,MAAN,CAAcxE,CAAd,CAAmB,CAAnB,CAEA,CAED4C,CAAS,CAAC7E,GAAV,CAAgBuG,CAAK,CAACI,IAAN,CAAY,GAAZ,EAAkB5E,IAAlB,EAAhB,CACA,MAAO8C,CAAAA,CAEP,C,gDAEY7E,C,CAAK4G,C,CAAS3G,C,CAAQC,C,CAAYC,C,CAAU,IAElDJ,CAAAA,CAAO,CAAK,KAAKA,OAAL,SAAF,CAAiC,KAAKA,OAAtC,CAAgD8G,uBAFR,CAGpDrG,CAAM,CAAGT,CAAO,CAAC+G,UAAR,CAAoB9G,CAApB,CAH2C,CAKxD,GAAgB,IAAX,GAAAQ,CAAL,CAAuB,CAEtBA,CAAM,CAAG,GAAIuG,gBAAJ,CAAmBhH,CAAnB,CAET,CAED,GAAKS,CAAM,CAACoC,cAAZ,CAA6BpC,CAAM,CAACoC,cAAP,CAAuB,KAAKC,WAA5B,EAE7B,GAAMmE,CAAAA,CAAO,CAAGxG,CAAM,CAACO,IAAP,CAAaf,CAAb,CAAkBC,CAAlB,CAA0BC,CAA1B,CAAsCC,CAAtC,CAAhB,CAEA,GAAKyG,CAAO,SAAZ,CAA6BI,CAAO,CAACJ,OAAR,CAAkBA,CAAlB,CAE7B,MAAOI,CAAAA,CAEP,C","sourcesContent":["import {\n\tColor,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tsRGBEncoding\n} from 'mod_wavefront/three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.encoding = sRGBEncoding;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n"],"file":"MTLLoader.min.js"}